#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace @__LRM
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LRM")]
	public partial class LRMDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertRoom(Room instance);
    partial void UpdateRoom(Room instance);
    partial void DeleteRoom(Room instance);
    partial void InsertComputer(Computer instance);
    partial void UpdateComputer(Computer instance);
    partial void DeleteComputer(Computer instance);
    #endregion
		
		public LRMDataContext() : 
				base(global::@__LRM.Properties.Settings.Default.LRMConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LRMDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LRMDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LRMDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LRMDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Room> Rooms
		{
			get
			{
				return this.GetTable<Room>();
			}
		}
		
		public System.Data.Linq.Table<Computer> Computers
		{
			get
			{
				return this.GetTable<Computer>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Room")]
	public partial class Room : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Room_ID;
		
		private string _Room_Name;
		
		private string _Building;
		
		private string _Floors;
		
		private EntitySet<Computer> _Computers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoom_IDChanging(int value);
    partial void OnRoom_IDChanged();
    partial void OnRoom_NameChanging(string value);
    partial void OnRoom_NameChanged();
    partial void OnBuildingChanging(string value);
    partial void OnBuildingChanged();
    partial void OnFloorsChanging(string value);
    partial void OnFloorsChanged();
    #endregion
		
		public Room()
		{
			this._Computers = new EntitySet<Computer>(new Action<Computer>(this.attach_Computers), new Action<Computer>(this.detach_Computers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Room_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Room_ID
		{
			get
			{
				return this._Room_ID;
			}
			set
			{
				if ((this._Room_ID != value))
				{
					this.OnRoom_IDChanging(value);
					this.SendPropertyChanging();
					this._Room_ID = value;
					this.SendPropertyChanged("Room_ID");
					this.OnRoom_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Room_Name", DbType="NVarChar(100)")]
		public string Room_Name
		{
			get
			{
				return this._Room_Name;
			}
			set
			{
				if ((this._Room_Name != value))
				{
					this.OnRoom_NameChanging(value);
					this.SendPropertyChanging();
					this._Room_Name = value;
					this.SendPropertyChanged("Room_Name");
					this.OnRoom_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Building", DbType="NVarChar(100)")]
		public string Building
		{
			get
			{
				return this._Building;
			}
			set
			{
				if ((this._Building != value))
				{
					this.OnBuildingChanging(value);
					this.SendPropertyChanging();
					this._Building = value;
					this.SendPropertyChanged("Building");
					this.OnBuildingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Floors", DbType="NVarChar(100)")]
		public string Floors
		{
			get
			{
				return this._Floors;
			}
			set
			{
				if ((this._Floors != value))
				{
					this.OnFloorsChanging(value);
					this.SendPropertyChanging();
					this._Floors = value;
					this.SendPropertyChanged("Floors");
					this.OnFloorsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Computer", Storage="_Computers", ThisKey="Room_ID", OtherKey="Room_ID")]
		public EntitySet<Computer> Computers
		{
			get
			{
				return this._Computers;
			}
			set
			{
				this._Computers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Computers(Computer entity)
		{
			this.SendPropertyChanging();
			entity.Room = this;
		}
		
		private void detach_Computers(Computer entity)
		{
			this.SendPropertyChanging();
			entity.Room = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Computer")]
	public partial class Computer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Computer_ID;
		
		private string _CPU;
		
		private string _Hard_Disk;
		
		private string _RAM;
		
		private string _VGA;
		
		private string _Monitor;
		
		private string _Room_Name;
		
		private int _Room_ID;
		
		private EntityRef<Room> _Room;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnComputer_IDChanging(int value);
    partial void OnComputer_IDChanged();
    partial void OnCPUChanging(string value);
    partial void OnCPUChanged();
    partial void OnHard_DiskChanging(string value);
    partial void OnHard_DiskChanged();
    partial void OnRAMChanging(string value);
    partial void OnRAMChanged();
    partial void OnVGAChanging(string value);
    partial void OnVGAChanged();
    partial void OnMonitorChanging(string value);
    partial void OnMonitorChanged();
    partial void OnRoom_NameChanging(string value);
    partial void OnRoom_NameChanged();
    partial void OnRoom_IDChanging(int value);
    partial void OnRoom_IDChanged();
    #endregion
		
		public Computer()
		{
			this._Room = default(EntityRef<Room>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Computer_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Computer_ID
		{
			get
			{
				return this._Computer_ID;
			}
			set
			{
				if ((this._Computer_ID != value))
				{
					this.OnComputer_IDChanging(value);
					this.SendPropertyChanging();
					this._Computer_ID = value;
					this.SendPropertyChanged("Computer_ID");
					this.OnComputer_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CPU", DbType="NVarChar(100)")]
		public string CPU
		{
			get
			{
				return this._CPU;
			}
			set
			{
				if ((this._CPU != value))
				{
					this.OnCPUChanging(value);
					this.SendPropertyChanging();
					this._CPU = value;
					this.SendPropertyChanged("CPU");
					this.OnCPUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hard_Disk", DbType="NVarChar(100)")]
		public string Hard_Disk
		{
			get
			{
				return this._Hard_Disk;
			}
			set
			{
				if ((this._Hard_Disk != value))
				{
					this.OnHard_DiskChanging(value);
					this.SendPropertyChanging();
					this._Hard_Disk = value;
					this.SendPropertyChanged("Hard_Disk");
					this.OnHard_DiskChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RAM", DbType="NVarChar(50)")]
		public string RAM
		{
			get
			{
				return this._RAM;
			}
			set
			{
				if ((this._RAM != value))
				{
					this.OnRAMChanging(value);
					this.SendPropertyChanging();
					this._RAM = value;
					this.SendPropertyChanged("RAM");
					this.OnRAMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VGA", DbType="NVarChar(50)")]
		public string VGA
		{
			get
			{
				return this._VGA;
			}
			set
			{
				if ((this._VGA != value))
				{
					this.OnVGAChanging(value);
					this.SendPropertyChanging();
					this._VGA = value;
					this.SendPropertyChanged("VGA");
					this.OnVGAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Monitor", DbType="NVarChar(50)")]
		public string Monitor
		{
			get
			{
				return this._Monitor;
			}
			set
			{
				if ((this._Monitor != value))
				{
					this.OnMonitorChanging(value);
					this.SendPropertyChanging();
					this._Monitor = value;
					this.SendPropertyChanged("Monitor");
					this.OnMonitorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Room_Name", DbType="NVarChar(150)")]
		public string Room_Name
		{
			get
			{
				return this._Room_Name;
			}
			set
			{
				if ((this._Room_Name != value))
				{
					this.OnRoom_NameChanging(value);
					this.SendPropertyChanging();
					this._Room_Name = value;
					this.SendPropertyChanged("Room_Name");
					this.OnRoom_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Room_ID", DbType="Int NOT NULL")]
		public int Room_ID
		{
			get
			{
				return this._Room_ID;
			}
			set
			{
				if ((this._Room_ID != value))
				{
					if (this._Room.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoom_IDChanging(value);
					this.SendPropertyChanging();
					this._Room_ID = value;
					this.SendPropertyChanged("Room_ID");
					this.OnRoom_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Computer", Storage="_Room", ThisKey="Room_ID", OtherKey="Room_ID", IsForeignKey=true)]
		public Room Room
		{
			get
			{
				return this._Room.Entity;
			}
			set
			{
				Room previousValue = this._Room.Entity;
				if (((previousValue != value) 
							|| (this._Room.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Room.Entity = null;
						previousValue.Computers.Remove(this);
					}
					this._Room.Entity = value;
					if ((value != null))
					{
						value.Computers.Add(this);
						this._Room_ID = value.Room_ID;
					}
					else
					{
						this._Room_ID = default(int);
					}
					this.SendPropertyChanged("Room");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
